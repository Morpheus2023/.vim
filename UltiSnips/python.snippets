#1
snippet urlpat "urlpatterns" b
from django.urls import path
from . import views
urlpatterns=[
   path('${2:url_path}',views.${1:view_name},name='${3:pattern_name}'),
]
endsnippet

#2
snippet funcview "basic function view" b
def ${1:view_name}(request):
    context={}
    return render(request,'${2:app_name}/${3:page_name}.html',context)
endsnippet

#3
snippet appreg "app registration" b
'${1:app_name}.apps.${2:Blog}Config',
endsnippet

snippet itzone "imports timezone" b
from django.utils import timezone
endsnippet

#4
snippet char "CharField"
${1:FIELDNAME} = models.CharField(max_length=${2}${0:, blank=True})
endsnippet

#5
snippet datetime
${1:FIELDNAME} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
endsnippet

#6
snippet path "boiler plate of a path" b
path('${2:url_path}',views.${1:view_name},name='${3:pattern_name}'),
endsnippet

#7
snippet staticdir "static directory" b
import os
STATICFILES_DIRS = [
   os.path.join(BASE_DIR,"static"),
   ]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
endsnippet

#8
snippet pathin "urlpattern with include" b
path('${2:path}/',include('${1:app_name}.urls')),
endsnippet

#9
snippet bmod "basic model for blog" b
from django.contrib.auth.models import User

STATUS= (
        (0,"Draft"),
        (1,"Publihs"),
        )
class Post(models.Model):
    title = models.CharField(max_length=200,unique=True)
    slug = models.SlugField(max_length=200,unique=True)
    author = models.ForeignKey(User,on_delete=models.CASCADE,related_name='blog_posts')
    updated_on = models.DateTimeField(auto_now=True)
    content = models.TextField()
    created_on = models.DateTimeField(auto_now_add=True)
    status = models.IntegerField(choices=STATUS,default=0)

    class Meta:
       ordering = ['-created_on']

    def __str__(self):
       return self.title

endsnippet

#10
snippet amadm "adding models to administration" b
from .models import Post

admin.site.register(Post)
endsnippet

#serial_no= 11
snippet usvi "user view import statements" b
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import authenticate

endsnippet

#serial_no= 12
snippet cpath "url path for a class based view" b
path('${1:path}/',views.${2:view_name}View.as_view(),name='${3:path_name}'),
endsnippet

#serial_no= 13
snippet classview "class based view" b
class ${1:child_view}View(${2:Parent_view}):
       $3
endsnippet

#serial_no= 14
snippet ListView "List the entries of a model" b
class ${1:model_name}List(ListView):
    model = ${2:model_name} 

    def head(self, *args,**kwargs):
        last_entry =
        self.get_queryset().latest('${3:publish_date}')

        response = HttpsResponse(
                headers={'Last-Modified:last_entry.publication_date.strftime('%a, %d %b %Y %H:%M:%S GMT')},
                )

        return response
endsnippet
 
#serial_no= 15
snippet metget "method:get" b
def get(self,request):
   return HttpsResponse(self.${1:attribute})
$2
endsnippet

#serial_no= 16
snippet atttemp "attribute:template" b
template_name="${1:template_name}"
$2
endsnippet

#serial_no= 17
snippet att "attribute of a class" b
${1:attribute_name} = ${2:attribute_value}
$3
endsnippet

#serial_no= 18
snippet met "method of a class" b
def ${1:method_name}(self,${2:parameters}):
    ${3:body}
endsnippet

#serial_no= 19
snippet email_form "Email form" b
from django import forms
class EmailPostForm(forms.Form):
   name = forms.CharField(max_length=25)
   email = forms.EmailField()
   to = forms.EmailField()
   comments = forms.CharField(required=False,widget=forms.Textarea)
endsnippet

#serial_no= 20
snippet share_view "share objects via email" b
def post_share(request,post_id):
   #Retrieve post by id 
     post = get_object_or_404(Post, id=post_id, status='published')
     sent = False
     if request.method == 'POST':
       # Form was submitted
         form = EmailPostForm(request.POST)
         if form.is_valid():
            # Form fields passed validation
                cd = form.cleaned_data
                post_url = request.build_absolute_uri(
                        psot.get_absolute_url())
                subject = f"{cd['name']} recommends you read " \
                        f"{post.title}"
                message = f"Read {post.title} at {post_url}\n\n" \
                          f"{cd['name']}\s comments: {cd['comments']}"
                send_mail(subject, message,'${1:email}gmail.com',
                        [cd['to']])
                sent = True
     else:
       form = EmailPostForm()
     return render(request,'${2:app_name}/post/share.html', {'post':post,
                                                      'form':form,
                                                       'sent':sent})
endsnippet

#serial_no= 21
snippet email_settings "settings to send email" b
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'morpheus.wcked@gmail.com'
EMAIL_HOST_PASSWORD = 'wckd1234'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
endsnippet

#serial_no= 22
snippet email_import "imports modules for email share" b
from .forms import EmailPostForm
from django.core.mail import send_mail
endsnippet
 
#serial_no= 23
snippet comment_model "comment model" b
class Comment(models.Model):
    post = models.ForeignKey(Post,
                             on_delete=models.CASCADE,
                             related_name='comments')
    name = models.CharField(max_length=80)
    email = models.EmailField()
    body = models.TextField()
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now = True)
    active = models.BooleanField(default=True)
    
    class Meta:
        ordering = ('created',)
    def __str__(self):
        return f'Comment by {self.name} on {self.post}'
endsnippet

#serial_no= 24
snippet comment_admin "adds comment to admin panel" b
@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('name','email','post','created','active')
    list_filter = ('active','created','updated')
    search_fields = ('name','email','body')
body 
endsnippet
